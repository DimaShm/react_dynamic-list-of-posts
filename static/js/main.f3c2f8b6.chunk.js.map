{"version":3,"sources":["utils/request.ts","utils/fetch_Posts.ts","components/Loader/Loader.tsx","components/PostList/PostsList.tsx","components/NewCommentsForm/NewCommentForm.tsx","utils/fetch_Comments.ts","components/PostDetails/PostDetails.tsx","components/UserSelector/UserSelector.tsx","App.tsx","utils/fetch_Users.ts","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","Loader","className","PostsList","selectedPost","setSelectedPost","selectedUserId","useState","posts","setPosts","isPostOpened","setIsPostOpened","postsLoadingError","setPostsLoadingError","isPostsLoaded","setIsPostsLoaded","useEffect","postsFromApi","filter","post","userId","catch","length","map","id","title","type","onClick","handleOpenBtnClick","NewCommentForm","setComments","authorName","setAuthorName","authorEmail","setAuthorEmail","commentText","setCommentText","isFormSubmit","setIsFormSubmit","isCommentAdded","setIsCommentAdded","additionError","setAdditionError","errorAuthorName","errorAuthorEmail","errorCommentText","addNewComment","newComment","comments","prevComments","onSubmit","e","preventDefault","postId","name","email","handleOnSubmit","htmlFor","value","placeholder","classNames","onChange","currentTarget","PostDetails","isNewFormVisible","setIsNewFormVisible","isCommentsLoaded","setIsCommentsLoaded","commentsError","setCommentsError","commentsFromApi","comment","handleDeleteBtnClick","commentId","copyComments","deleteComment","deletedComment","Object","values","includes","href","UserSelector","setIsStarted","users","setSelectedUserId","selectedUserName","setSelectedUserName","isUsersListOpen","setIsUsersListOpen","role","user","selectedUser","App","isStarted","usersLoadingError","setUsersLoadingError","setUsers","usersFromApi","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3c2f8b6.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nexport function request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n","import { Post } from '../types/Post';\nimport { request } from './request';\n\nexport const getPosts = () => {\n  return request<Post[]>('/posts');\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Post } from '../../types/Post';\nimport { getPosts } from '../../utils/fetch_Posts';\nimport { Loader } from '../Loader';\nimport './PostList.scss';\n\ntype Props = {\n  selectedPost: Post | null,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>,\n  selectedUserId: number,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedPost,\n  setSelectedPost,\n  selectedUserId,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isPostOpened, setIsPostOpened] = useState(false);\n  const [postsLoadingError, setPostsLoadingError] = useState('');\n  const [isPostsLoaded, setIsPostsLoaded] = useState(false);\n\n  useEffect(() => {\n    setIsPostsLoaded(false);\n    setSelectedPost(null);\n    setPosts([]);\n\n    getPosts()\n      .then(postsFromApi => {\n        setPosts(postsFromApi.filter(post => post.userId === selectedUserId));\n        setIsPostsLoaded(true);\n      })\n      .catch(() => setPostsLoadingError('Something went wrong!'));\n  }, [selectedUserId]);\n\n  const handleOpenBtnClick = (post: Post) => {\n    setSelectedPost(post);\n    setIsPostOpened(true);\n  };\n\n  const handleCloseBtnClick = () => {\n    setSelectedPost(null);\n    setIsPostOpened(false);\n  };\n\n  return (\n    <div\n      data-cy=\"PostsList\"\n      className={\n        !selectedPost\n          ? 'PostList-stretch'\n          : ''\n      }\n    >\n      {postsLoadingError\n    && (\n      <div\n        className=\"notification is-danger\"\n        data-cy=\"PostsLoadingError\"\n      >\n        {postsLoadingError}\n      </div>\n    )}\n\n      {!isPostsLoaded\n     && <Loader />}\n\n      {(isPostsLoaded && posts.length > 0)\n          && (\n            <>\n              <p className=\"title\">Posts:</p>\n\n              <table\n                className=\"\n                  table is-fullwidth is-striped is-hoverable is-narrow\n                \"\n              >\n                <thead>\n                  <tr className=\"has-background-link-light\">\n                    <th>#</th>\n                    <th>Title</th>\n                    <th> </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {posts.map(post => (\n                    <tr data-cy=\"Post\" key={post.id}>\n                      <td data-cy=\"PostId\">{post.id}</td>\n\n                      <td data-cy=\"PostTitle\">\n                        {post.title}\n                      </td>\n\n                      <td className=\"has-text-right is-vcentered\">\n                        {(!isPostOpened || post.id !== selectedPost?.id)\n                    && (\n                      <button\n                        type=\"button\"\n                        data-cy=\"PostButton\"\n                        className=\"button is-light\"\n                        onClick={() => handleOpenBtnClick(post)}\n                      >\n                        Open\n                      </button>\n                    )}\n                        {(post.id === selectedPost?.id && isPostOpened)\n                    && (\n                      <button\n                        type=\"button\"\n                        data-cy=\"PostButton\"\n                        className=\"button is-link\"\n                        onClick={() => handleCloseBtnClick()}\n                      >\n                        Close\n                      </button>\n                    )}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </>\n          )}\n\n      {(isPostsLoaded && !posts.length)\n            && (\n              <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                No posts yet\n              </div>\n            )}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport { addComment } from '../../utils/fetch_Comments';\n\ntype Props = {\n  selectedPost: Post | null,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  setComments,\n}) => {\n  const [authorName, setAuthorName] = useState('');\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [isFormSubmit, setIsFormSubmit] = useState(false);\n  const [isCommentAdded, setIsCommentAdded] = useState(true);\n  const [additionError, setAdditionError] = useState('');\n\n  const errorAuthorName = isFormSubmit && !authorName;\n  const errorAuthorEmail = isFormSubmit && !authorEmail;\n  const errorCommentText = isFormSubmit && !commentText;\n\n  const addNewComment = (newComment: Comment) => {\n    addComment(newComment)\n      .then(comments => {\n        setIsCommentAdded(true);\n\n        if (!comments.id) {\n          setAdditionError('Unable to add a comment');\n\n          return;\n        }\n\n        setComments((prevComments) => (\n          [...prevComments, comments]\n        ));\n      })\n      .catch(() => setAdditionError('Something went wrong!'));\n  };\n\n  const handleOnSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setIsFormSubmit(true);\n    const allRight = authorName && authorEmail && commentText;\n\n    if (allRight && selectedPost) {\n      const newComment = {\n        postId: selectedPost.id,\n        name: authorName,\n        email: authorEmail,\n        body: commentText,\n      };\n\n      addNewComment(newComment);\n      setIsCommentAdded(false);\n      setCommentText('');\n      setIsFormSubmit(false);\n    }\n  };\n\n  const handleResetBtnClick = () => {\n    setAuthorName('');\n    setAuthorEmail('');\n    setCommentText('');\n    setIsFormSubmit(false);\n  };\n\n  return (\n    <>\n      {additionError\n        && (\n          <div className=\"notification is-danger\">\n            {additionError}\n          </div>\n        )}\n\n      <form\n        data-cy=\"NewCommentForm\"\n        onSubmit={(e) => handleOnSubmit(e)}\n      >\n        <div className=\"field\" data-cy=\"NameField\">\n          <label className=\"label\" htmlFor=\"comment-author-name\">\n            Author Name\n          </label>\n\n          <div className=\"control has-icons-left has-icons-right\">\n            <input\n              type=\"text\"\n              name=\"name\"\n              id=\"comment-author-name\"\n              value={authorName}\n              placeholder=\"Name Surname\"\n              className={classNames(\n                'input',\n                { 'is-danger': errorAuthorName },\n              )}\n              onChange={(e) => setAuthorName(e.currentTarget.value)}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-user\" />\n            </span>\n\n            {errorAuthorName\n              && (\n                <span\n                  className=\"icon is-small is-right has-text-danger\"\n                  data-cy=\"ErrorIcon\"\n                >\n                  <i className=\"fas fa-exclamation-triangle\" />\n                </span>\n              )}\n          </div>\n\n          {errorAuthorName\n          && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Name is required\n            </p>\n          )}\n        </div>\n\n        <div className=\"field\" data-cy=\"EmailField\">\n          <label className=\"label\" htmlFor=\"comment-author-email\">\n            Author Email\n          </label>\n\n          <div className=\"control has-icons-left has-icons-right\">\n            <input\n              type=\"text\"\n              name=\"email\"\n              id=\"comment-author-email\"\n              value={authorEmail}\n              placeholder=\"email@test.com\"\n              className={classNames(\n                'input',\n                { 'is-danger': errorAuthorEmail },\n              )}\n              onChange={(e) => setAuthorEmail(e.currentTarget.value)}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-envelope\" />\n            </span>\n\n            {errorAuthorEmail\n              && (\n                <span\n                  className=\"icon is-small is-right has-text-danger\"\n                  data-cy=\"ErrorIcon\"\n                >\n                  <i className=\"fas fa-exclamation-triangle\" />\n                </span>\n              ) }\n          </div>\n\n          {errorAuthorEmail\n            && (\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                Email is required\n              </p>\n            )}\n        </div>\n\n        <div className=\"field\" data-cy=\"BodyField\">\n          <label className=\"label\" htmlFor=\"comment-body\">\n            Comment Text\n          </label>\n\n          <div className=\"control\">\n            <textarea\n              id=\"comment-body\"\n              name=\"body\"\n              placeholder=\"Type comment here\"\n              value={commentText}\n              className={classNames(\n                'textarea',\n                { 'is-danger': errorCommentText },\n              )}\n              onChange={(e) => setCommentText(e.currentTarget.value)}\n            />\n          </div>\n\n          {errorCommentText\n            && (\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                Enter some text\n              </p>\n            )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className={classNames(\n                'button is-link',\n                { 'is-loading': !isCommentAdded },\n              )}\n            >\n              Add\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {/* eslint-disable-next-line react/button-has-type */}\n            <button\n              type=\"reset\"\n              className=\"button is-link is-light\"\n              onClick={handleResetBtnClick}\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n\n      </form>\n    </>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { request } from './request';\n\nexport const getComments = () => {\n  return request<Comment[]>('/comments');\n};\n\nexport const addComment = (data: Comment) => {\n  return request<Comment>('/comments', 'POST', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return request(`/comments/${commentId}`, 'DELETE');\n};\n","import React, { useEffect, useState } from 'react';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport { deleteComment, getComments } from '../../utils/fetch_Comments';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentsForm/NewCommentForm';\n\ntype Props = {\n  selectedPost: Post | null,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isNewFormVisible, setIsNewFormVisible] = useState(false);\n  const [isCommentsLoaded, setIsCommentsLoaded] = useState(false);\n  const [commentsError, setCommentsError] = useState('');\n\n  useEffect(() => {\n    setIsCommentsLoaded(false);\n    setComments([]);\n\n    getComments()\n      .then(commentsFromApi => {\n        setComments(\n          commentsFromApi.filter(\n            comment => comment.postId === selectedPost?.id,\n          ),\n        );\n        setIsCommentsLoaded(true);\n      })\n      .catch(() => setCommentsError('Something went wrong!'));\n  }, [selectedPost]);\n\n  useEffect(() => {\n    setIsNewFormVisible(false);\n  }, [isCommentsLoaded]);\n\n  const handleDeleteBtnClick = (commentId: number) => {\n    if (commentId) {\n      const copyComments = [...comments];\n\n      setComments(comments.filter(comment => comment.id !== commentId));\n\n      deleteComment(commentId)\n        .then(deletedComment => {\n          if (deletedComment && typeof deletedComment === 'object') {\n            if (Object.values(deletedComment).includes('Not Found')) {\n              setCommentsError('Unable to delete a comment');\n              setComments(copyComments);\n            }\n          }\n        })\n        .catch(() => setCommentsError('Something went wrong!'));\n    }\n  };\n\n  return (\n    <div\n      className={\n        selectedPost\n          ? 'PostDetails-show'\n          : 'content'\n      }\n      data-cy=\"PostDetails\"\n    >\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        {commentsError\n          && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {commentsError}\n            </div>\n          )}\n\n        {!isCommentsLoaded\n          ? (\n            <div className=\"block\">\n              <Loader />\n            </div>\n          ) : (\n            <>\n              <p\n                className=\"title is-4\"\n              >\n                {comments.length ? 'Comments:' : 'No comments yet'}\n              </p>\n              {comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href=\"mailto:misha@mate.academy\" data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => {\n                        if (comment.id) {\n                          handleDeleteBtnClick(comment.id);\n                        }\n                      }}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n\n              {!isNewFormVisible\n             && (\n               <button\n                 data-cy=\"WriteCommentButton\"\n                 type=\"button\"\n                 className=\"button is-link\"\n                 onClick={() => setIsNewFormVisible(true)}\n               >\n                 Write a comment\n               </button>\n             )}\n            </>\n          )}\n\n      </div>\n\n      {isNewFormVisible\n        && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            setComments={setComments}\n          />\n        )}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { Post } from '../../types/Post';\nimport { User } from '../../types/User';\n\ntype Props = {\n  setIsStarted: React.Dispatch<React.SetStateAction<boolean>>,\n  users: User[],\n  selectedUserId: number,\n  setSelectedUserId: React.Dispatch<React.SetStateAction<number>>,\n  selectedPost: Post | null,\n};\nexport const UserSelector: React.FC<Props> = ({\n  setIsStarted,\n  users,\n  selectedUserId,\n  setSelectedUserId,\n  selectedPost,\n}) => {\n  const [selectedUserName, setSelectedUserName] = useState('');\n  const [isUsersListOpen, setIsUsersListOpen] = useState(false);\n\n  useEffect(() => {\n    setIsUsersListOpen(false);\n  }, [selectedPost]);\n\n  const handleOnClick = (selectedUser: User) => {\n    setSelectedUserId(selectedUser.id);\n    setSelectedUserName(selectedUser.name);\n    setIsStarted(true);\n    setIsUsersListOpen(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsUsersListOpen(true)}\n        >\n          <span>\n            {selectedUserName ? `${selectedUserName}:` : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i\n              className=\"fas fa-angle-down\"\n              aria-hidden=\"true\"\n              onClick={() => setIsUsersListOpen(true)}\n            />\n          </span>\n        </button>\n      </div>\n      {isUsersListOpen\n        && (\n          <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n            <div className=\"dropdown-content\">\n              {users.map((user, id) => (\n                <a\n                  key={user.id}\n                  id={`${user.id}`}\n                  href={`#user-${id + 1}`}\n                  className={classNames(\n                    'dropdown-item',\n                    {\n                      'is-active': user.id === selectedUserId,\n                    },\n                  )}\n                  onClick={() => handleOnClick(user)}\n                >\n                  {user.name}\n                </a>\n              ))}\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostList/PostsList';\nimport { PostDetails } from './components/PostDetails/PostDetails';\nimport { UserSelector } from './components/UserSelector/UserSelector';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUsers } from './utils/fetch_Users';\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  const [isStarted, setIsStarted] = useState(false);\n  const [usersLoadingError, setUsersLoadingError] = useState('');\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState<number>(0);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    getUsers()\n      .then(usersFromApi => setUsers(usersFromApi))\n      .catch(() => setUsersLoadingError('Something went wrong!'));\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  setIsStarted={setIsStarted}\n                  users={users}\n                  selectedUserId={selectedUserId}\n                  setSelectedUserId={setSelectedUserId}\n                  selectedPost={selectedPost}\n                />\n              </div>\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!isStarted\n                  && (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )}\n\n                {usersLoadingError\n               && (\n                 <div\n                   className=\"notification is-danger\"\n                   data-cy=\"UsersLoadingError\"\n                 >\n                   {usersLoadingError}\n                 </div>\n               )}\n\n                {isStarted\n                && (\n                  <PostsList\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                    selectedUserId={selectedUserId}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n          {selectedPost\n          && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { request } from './request';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return request<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}