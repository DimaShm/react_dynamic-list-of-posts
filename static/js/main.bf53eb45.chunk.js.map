{"version":3,"sources":["utils/request.ts","utils/fetch_Comments.ts","components/PostList/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentsForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/UserSelector/UserSelector.tsx","utils/fetch_Posts.ts","App.tsx","utils/fetch_Users.ts","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","PostsList","posts","setLoadingError","selectedPost","setSelectedPost","setComments","setIsCommentsLoaded","useState","isPostOpened","setIsPostOpened","handleOpenBtnClick","post","commentsFromApi","filter","comment","postId","id","catch","className","map","title","type","onClick","Loader","NewCommentForm","authorName","setAuthorName","authorEmail","setAuthorEmail","commentText","setCommentText","isFormSubmit","setIsFormSubmit","isCommentsLoaded","additionError","setAdditionError","errorAuthorName","errorAuthorEmail","errorCommentText","addNewComment","newComment","comments","prevComments","onSubmit","e","preventDefault","name","email","handleOnSubmit","htmlFor","value","placeholder","classNames","onChange","currentTarget","PostDetails","loadingError","isNewFormVisible","setIsNewFormVisible","deletionError","setDeletionError","useEffect","handleDeleteBtnClick","commentId","copyComments","deleteComment","deletedComment","Object","values","includes","length","href","UserSelector","users","setPosts","setIsStarted","setIsPostsLoaded","selectedUser","setSelectedUser","isUsersListOpen","setIsUsersListOpen","handleOnClick","user","postsFromApi","userId","role","App","isStarted","setUsers","isPostsLoaded","usersFromApi","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf53eb45.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nexport function request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n","import { Comment } from '../types/Comment';\nimport { request } from './request';\n\nexport const getComments = () => {\n  return request<Comment[]>('/comments');\n};\n\nexport const addComment = (data: Comment) => {\n  return request<Comment>('/comments', 'POST', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return request(`/comments/${commentId}`, 'DELETE');\n};\n","import React, { useState } from 'react';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport { getComments } from '../../utils/fetch_Comments';\nimport './PostList.scss';\n\ntype Props = {\n  posts: Post[],\n  setLoadingError: React.Dispatch<React.SetStateAction<string>>,\n  selectedPost: Post | null,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  setIsCommentsLoaded: React.Dispatch<React.SetStateAction<boolean>>,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  setLoadingError,\n  selectedPost,\n  setSelectedPost,\n  setComments,\n  setIsCommentsLoaded,\n}) => {\n  const [isPostOpened, setIsPostOpened] = useState(false);\n\n  const handleOpenBtnClick = (post: Post) => {\n    setSelectedPost(post);\n    setIsPostOpened(true);\n    setIsCommentsLoaded(false);\n\n    getComments()\n      .then(commentsFromApi => {\n        setComments(\n          commentsFromApi.filter(comment => comment.postId === post.id),\n        );\n        setIsCommentsLoaded(true);\n      })\n      .catch(() => setLoadingError('Something went wrong!'));\n  };\n\n  const handleCloseBtnClick = () => {\n    setIsCommentsLoaded(false);\n    setIsPostOpened(false);\n    setComments([]);\n    setSelectedPost(null);\n  };\n\n  return (\n    <div\n      data-cy=\"PostsList\"\n      className={\n        !selectedPost\n          ? 'PostList-stretch'\n          : ''\n      }\n    >\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {(!isPostOpened || post.id !== selectedPost?.id)\n              && (\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className=\"button is-light\"\n                  onClick={() => handleOpenBtnClick(post)}\n                >\n                  Open\n                </button>\n              )}\n                {(post.id === selectedPost?.id && isPostOpened)\n               && (\n                 <button\n                   type=\"button\"\n                   data-cy=\"PostButton\"\n                   className=\"button is-link\"\n                   onClick={() => handleCloseBtnClick()}\n                 >\n                   Close\n                 </button>\n               )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport { addComment } from '../../utils/fetch_Comments';\n\ntype Props = {\n  selectedPost: Post | null,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  setComments,\n  selectedPost,\n}) => {\n  const [authorName, setAuthorName] = useState('');\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [isFormSubmit, setIsFormSubmit] = useState(false);\n  const [isCommentsLoaded, setIsCommentsLoaded] = useState(true);\n  const [additionError, setAdditionError] = useState('');\n\n  const errorAuthorName = isFormSubmit && !authorName;\n  const errorAuthorEmail = isFormSubmit && !authorEmail;\n  const errorCommentText = isFormSubmit && !commentText;\n\n  const addNewComment = (newComment: Comment) => {\n    addComment(newComment)\n      .then(comments => {\n        setIsCommentsLoaded(true);\n\n        if (!comments.id) {\n          setAdditionError('Unable to add a comment');\n\n          return;\n        }\n\n        setComments((prevComments) => (\n          [...prevComments, comments]\n        ));\n      })\n      .catch(() => setAdditionError('Something went wrong!'));\n  };\n\n  const handleOnSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setIsFormSubmit(true);\n    const allRight = authorName && authorEmail && commentText;\n\n    if (allRight && selectedPost) {\n      const newComment = {\n        postId: selectedPost.id,\n        name: authorName,\n        email: authorEmail,\n        body: commentText,\n      };\n\n      addNewComment(newComment);\n      setIsCommentsLoaded(false);\n      setCommentText('');\n      setIsFormSubmit(false);\n    }\n  };\n\n  const handleResetBtnClick = () => {\n    setAuthorName('');\n    setAuthorEmail('');\n    setCommentText('');\n    setIsFormSubmit(false);\n  };\n\n  return (\n    <>\n      {additionError\n        && (\n          <div className=\"notification is-danger\">\n            {additionError}\n          </div>\n        )}\n\n      <form\n        data-cy=\"NewCommentForm\"\n        onSubmit={(e) => handleOnSubmit(e)}\n      >\n        <div className=\"field\" data-cy=\"NameField\">\n          <label className=\"label\" htmlFor=\"comment-author-name\">\n            Author Name\n          </label>\n\n          <div className=\"control has-icons-left has-icons-right\">\n            <input\n              type=\"text\"\n              name=\"name\"\n              id=\"comment-author-name\"\n              value={authorName}\n              placeholder=\"Name Surname\"\n              className={classNames(\n                'input',\n                { 'is-danger': errorAuthorName },\n              )}\n              onChange={(e) => setAuthorName(e.currentTarget.value)}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-user\" />\n            </span>\n\n            {errorAuthorName\n              && (\n                <span\n                  className=\"icon is-small is-right has-text-danger\"\n                  data-cy=\"ErrorIcon\"\n                >\n                  <i className=\"fas fa-exclamation-triangle\" />\n                </span>\n              )}\n          </div>\n\n          {errorAuthorName\n          && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Name is required\n            </p>\n          )}\n        </div>\n\n        <div className=\"field\" data-cy=\"EmailField\">\n          <label className=\"label\" htmlFor=\"comment-author-email\">\n            Author Email\n          </label>\n\n          <div className=\"control has-icons-left has-icons-right\">\n            <input\n              type=\"text\"\n              name=\"email\"\n              id=\"comment-author-email\"\n              value={authorEmail}\n              placeholder=\"email@test.com\"\n              className={classNames(\n                'input',\n                { 'is-danger': errorAuthorEmail },\n              )}\n              onChange={(e) => setAuthorEmail(e.currentTarget.value)}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-envelope\" />\n            </span>\n\n            {errorAuthorEmail\n              && (\n                <span\n                  className=\"icon is-small is-right has-text-danger\"\n                  data-cy=\"ErrorIcon\"\n                >\n                  <i className=\"fas fa-exclamation-triangle\" />\n                </span>\n              ) }\n          </div>\n\n          {errorAuthorEmail\n            && (\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                Email is required\n              </p>\n            )}\n        </div>\n\n        <div className=\"field\" data-cy=\"BodyField\">\n          <label className=\"label\" htmlFor=\"comment-body\">\n            Comment Text\n          </label>\n\n          <div className=\"control\">\n            <textarea\n              id=\"comment-body\"\n              name=\"body\"\n              placeholder=\"Type comment here\"\n              value={commentText}\n              className={classNames(\n                'textarea',\n                { 'is-danger': errorCommentText },\n              )}\n              onChange={(e) => setCommentText(e.currentTarget.value)}\n            />\n          </div>\n\n          {errorCommentText\n            && (\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                Enter some text\n              </p>\n            )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className={classNames(\n                'button is-link',\n                { 'is-loading': !isCommentsLoaded },\n              )}\n            >\n              Add\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {/* eslint-disable-next-line react/button-has-type */}\n            <button\n              type=\"reset\"\n              className=\"button is-link is-light\"\n              onClick={handleResetBtnClick}\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n\n      </form>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport { deleteComment } from '../../utils/fetch_Comments';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentsForm/NewCommentForm';\n\ntype Props = {\n  isCommentsLoaded: boolean,\n  selectedPost: Post | null,\n  comments: Comment[],\n  loadingError: string,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  isCommentsLoaded,\n  comments,\n  selectedPost,\n  loadingError,\n  setComments,\n}) => {\n  const [isNewFormVisible, setIsNewFormVisible] = useState(false);\n  const [deletionError, setDeletionError] = useState('');\n\n  useEffect(() => {\n    setIsNewFormVisible(false);\n  }, [isCommentsLoaded]);\n\n  const handleDeleteBtnClick = (commentId: number) => {\n    if (commentId) {\n      const copyComments = [...comments];\n\n      setComments(comments.filter(comment => comment.id !== commentId));\n\n      deleteComment(commentId)\n        .then(deletedComment => {\n          if (deletedComment && typeof deletedComment === 'object') {\n            if (Object.values(deletedComment).includes('Not Found')) {\n              setDeletionError('Unable to delete a comment');\n              setComments(copyComments);\n            }\n          }\n        })\n        .catch(() => setDeletionError('Something went wrong!'));\n    }\n  };\n\n  return (\n    <div\n      className={\n        selectedPost\n          ? 'PostDetails-show'\n          : 'content'\n      }\n      data-cy=\"PostDetails\"\n    >\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        {loadingError\n          && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {loadingError}\n            </div>\n          )}\n\n        {!isCommentsLoaded\n          ? (\n            <div className=\"block\">\n              <Loader />\n            </div>\n          ) : (\n            <>\n              <p\n                className=\"title is-4\"\n              >\n                {comments.length ? 'Comments:' : 'No comments yet'}\n              </p>\n              {comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href=\"mailto:misha@mate.academy\" data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => {\n                        if (comment.id) {\n                          handleDeleteBtnClick(comment.id);\n                        }\n                      }}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n\n              {deletionError\n              && (\n                <div className=\"notification is-danger\">\n                  {deletionError}\n                </div>\n              )}\n\n              {!isNewFormVisible\n             && (\n               <button\n                 data-cy=\"WriteCommentButton\"\n                 type=\"button\"\n                 className=\"button is-link\"\n                 onClick={() => setIsNewFormVisible(true)}\n               >\n                 Write a comment\n               </button>\n             )}\n            </>\n          )}\n\n      </div>\n\n      {isNewFormVisible\n        && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            setComments={setComments}\n          />\n        )}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Post } from '../../types/Post';\nimport { User } from '../../types/User';\nimport { getPosts } from '../../utils/fetch_Posts';\n\ntype Props = {\n  users: User[],\n  setLoadingError: React.Dispatch<React.SetStateAction<string>>,\n  setPosts: React.Dispatch<React.SetStateAction<Post[]>>,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>,\n  setIsStarted: React.Dispatch<React.SetStateAction<boolean>>,\n  setIsPostsLoaded: React.Dispatch<React.SetStateAction<boolean>>,\n};\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  setLoadingError,\n  setPosts,\n  setSelectedPost,\n  setIsStarted,\n  setIsPostsLoaded,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isUsersListOpen, setIsUsersListOpen] = useState(false);\n\n  const handleOnClick = (user: User) => {\n    setSelectedUser(user);\n    setIsStarted(true);\n    setIsUsersListOpen(false);\n    setIsPostsLoaded(false);\n    setSelectedPost(null);\n\n    getPosts()\n      .then(postsFromApi => {\n        setPosts(postsFromApi.filter(post => post.userId === user.id));\n        setIsPostsLoaded(true);\n      })\n      .catch(() => setLoadingError('Something went wrong!'));\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsUsersListOpen(true)}\n        >\n          <span>\n            {selectedUser ? `${selectedUser.name}:` : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i\n              className=\"fas fa-angle-down\"\n              aria-hidden=\"true\"\n              onClick={() => setIsUsersListOpen(true)}\n            />\n          </span>\n        </button>\n      </div>\n      {isUsersListOpen\n        && (\n          <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n            <div className=\"dropdown-content\">\n              {users.map((user, id) => (\n                <a\n                  key={user.id}\n                  id={`${user.id}`}\n                  href={`#user-${id + 1}`}\n                  className={classNames(\n                    'dropdown-item',\n                    {\n                      'is-active': user.id === selectedUser?.id,\n                    },\n                  )}\n                  onClick={() => handleOnClick(user)}\n                >\n                  {user.name}\n                </a>\n              ))}\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { request } from './request';\n\nexport const getPosts = () => {\n  return request<Post[]>('/posts');\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostList/PostsList';\nimport { PostDetails } from './components/PostDetails/PostDetails';\nimport { UserSelector } from './components/UserSelector/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUsers } from './utils/fetch_Users';\nimport { Comment } from './types/Comment';\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  const [isStarted, setIsStarted] = useState(false);\n  const [loadingError, setLoadingError] = useState('');\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isPostsLoaded, setIsPostsLoaded] = useState(false);\n  const [isCommentsLoaded, setIsCommentsLoaded] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(usersFromApi => setUsers(usersFromApi))\n      .catch(() => setLoadingError('Something went wrong!'));\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  setLoadingError={setLoadingError}\n                  users={users}\n                  setPosts={setPosts}\n                  setSelectedPost={setSelectedPost}\n                  setIsStarted={setIsStarted}\n                  setIsPostsLoaded={setIsPostsLoaded}\n                />\n              </div>\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!isStarted\n                  && (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )}\n\n                {(isStarted && !isPostsLoaded)\n                  && <Loader />}\n\n                {loadingError\n               && (\n                 <div\n                   className=\"notification is-danger\"\n                   data-cy=\"PostsLoadingError\"\n                 >\n                   {loadingError}\n                 </div>\n               )}\n\n                {(isStarted && !posts.length && isPostsLoaded)\n                && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n                {(posts.length > 0 && isPostsLoaded)\n                && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                    setLoadingError={setLoadingError}\n                    setComments={setComments}\n                    setIsCommentsLoaded={setIsCommentsLoaded}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n          {selectedPost\n          && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  isCommentsLoaded={isCommentsLoaded}\n                  selectedPost={selectedPost}\n                  loadingError={loadingError}\n                  comments={comments}\n                  setComments={setComments}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { request } from './request';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return request<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}